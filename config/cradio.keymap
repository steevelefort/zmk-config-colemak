/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define NAV_L 1
#define OTHER_L 2
#define NUM_L 3
#define SYM_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
//&lt { quick-tap-ms = <200>; };

/ {
    behaviors {
        //#ifndef HOMEY_HOLDING_TYPE
        //#define HOMEY_HOLDING_TYPE "balanced"
        //#endif
        //#ifndef HOMEY_HOLDING_TIME
        //#define HOMEY_HOLDING_TIME 270
        //#endif
        //#ifndef HOMEY_STREAK_DECAY
        //#define HOMEY_STREAK_DECAY 170
        //#endif
        //#ifndef HOMEY_REPEAT_DECAY
        //#define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
        //#endif

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;

            //require-prior-idle-ms = <170>;

            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            //label = "Home row left";
            //hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 32>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;

            //require-prior-idle-ms = <170>;

            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            //label = "Home row right";
            //hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 31 30>;
        };

        tapmod_thumb: miryoku_tapmod_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_MOD_THUMB";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 30 32 33>; // wait for other home row mods
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;

            //require-prior-idle-ms = <170>;

            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            //retro-tap;
        };

        layer_thumb: miryoku_home_row_layer_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LAYER_THUMB";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29>; // wait for other home row mods
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;

            //require-prior-idle-ms = <170>;

            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            //retro-tap;
        };

        taphold: taphold {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPHOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
        };

        tapholdlong: tapholdlong {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPHOLDLONG";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
        };

        hrmcaps: hrmcaps {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;
            #binding-cells = <2>;
            bindings = <&kp>, <&caps_word>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
            label = "HRMCAPS";
        };

        sticky_layer_thumb: sticky_layer_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_LAYER_THUMB";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33>;
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;
            #binding-cells = <2>;
            bindings = <&mo>, <&sk>;
        };

        sticky_thumb: sticky_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_THUMB";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29>;
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;
            #binding-cells = <2>;
            bindings = <&kp>, <&sk>;
        };

        FrenchOrDia: FrenchOrDia {
            compatible = "zmk,behavior-tap-dance";
            label = "FRENCHORDIA";
            #binding-cells = <0>;
            bindings = <&sl 3>, <&diaeresis>;
        };

        ODK: ODK {
            compatible = "zmk,behavior-hold-tap";
            label = "ODK";
            bindings = <&mo>, <&FrenchOrDia>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;
        };

        egrave: egrave {
          label = "EGRAVE";
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&egrave_min>, <&egrave_maj>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        agrave: agrave {
            label = "AGRAVE";
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&agrave_min>, <&agrave_maj>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ugrave: ugrave {
            label = "UGRAVE";
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&ugrave_min>, <&ugrave_maj>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        eacute: eacute {
            label = "EACUTE";
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&eacute_min>, <&eacute_maj>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        acircumflex: acircumflex {
            label = "ACIRCUMFLEX";
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&ecircumflex_min>, <&ecircumflex_maj>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ecircumflex: ecircumflex {
            label = "ECIRCUMFLEX";
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&ecircumflex_min>, <&ecircumflex_maj>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        icircumflex: icircumflex {
            label = "ICIRCUMFLEX";
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&ecircumflex_min>, <&ecircumflex_maj>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ocircumflex: ocircumflex {
            label = "OCIRCUMFLEX";
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&ecircumflex_min>, <&ecircumflex_maj>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ucircumflex: ucircumflex {
            label = "ACIRCUMFLEX";
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&ecircumflex_min>, <&ecircumflex_maj>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ae: ae {
            label = "AE";
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&ae_min>, <&ae_maj>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        oe: oe {
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&oe_min>, <&oe_maj>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "OE";
        };

        idiaeresis: idiaeresis {
            label = "IDIAERESIS";
          compatible = "zmk,behavior-mod-morph";
          #binding-cells = <0>;
          bindings = <&idiaeresis_min>, <&idiaeresis_maj>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };




    };

    combos {
        compatible = "zmk,combos";

        FnLayer {
            bindings = <&mo 5>;
            key-positions = <30 31>;
        };

        FastEsc {
            bindings = <&kp ESC>;
            key-positions = <12 30>;
        };

        FastTab {
            bindings = <&kp TAB>;
            key-positions = <30 13>;
        };

        FastBackTab {
            bindings = <&kp TAB>;
            key-positions = <30 11>;
        };

        FastDelete {
            bindings = <&kp DEL>;
            key-positions = <30 14>;
        };

        FastBackspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <30 10>;
        };


    };

    macros {

      // Dead keys
        grave: grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(S)>;
            label = "GRAVE";
        };

        acute: acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(F)>;
            label = "ACUTE";
        };

        circumflex: circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(X)>;
            label = "CIRCUMFLEX";
        };

        diaeresis: diaeresis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(V)>;
            label = "DIAERESIS";
        };

        // Current French accents min
        egrave_min: egrave_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&grave &kp K>;
            label = "EGRAVE_MIN";
        };

        agrave_min: agrave_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&grave &kp A>;
            label = "AGRAVE_MIN";
        };

        ugrave_min: ugrave_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&grave &kp I>;
            label = "UGRAVE_MIN";
        };

        eacute_min: eacute_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&acute &kp K>;
            label = "EACUTE_MIN";
        };

        acircumflex_min: acircumflex_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&circumflex &kp A>;
            label = "ACIRCUMFLEX_MIN";
        };

        ecircumflex_min: ecircumflex_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&circumflex &kp K>;
            label = "ECIRCUMFLEX_MIN";
        };

        icircumflex_min: icircumflex_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&circumflex &kp L>;
            label = "ICIRCUMFLEX_MIN";
        };

        ocircumflex_min: ocircumflex_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&circumflex &kp SEMICOLON>;
            label = "OCIRCUMFLEX_MIN";
        };

        ucircumflex_min: ucircumflex_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&circumflex &kp I>;
            label = "ACIRCUMFLEX_MIN";
        };

        ae_min: ae_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(Z)>;
            label = "AE_MIN";
        };

        oe_min: oe_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(B)>;
            label = "OE_MIN";
        };

        idiaeresis_min: idiaeresis_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&diaeresis &kp L>;
            label = "IDIAERESIS_MIN";
        };


        // Current French accents maj
        egrave_maj: egrave_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&grave &kp LS(K)>;
            label = "EGRAVE_MAJ";
        };

        agrave_maj: agrave_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&grave &kp LS(A)>;
            label = "AGRAVE_MAJ";
        };

        ugrave_maj: ugrave_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&grave &kp LS(I)>;
            label = "UGRAVE_MAJ";
        };

        eacute_maj: eacute_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&acute &kp LS(K)>;
            label = "EACUTE_MAJ";
        };

        acircumflex_maj: acircumflex_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&circumflex &kp LS(A)>;
            label = "ACIRCUMFLEX_MAJ";
        };

        ecircumflex_maj: ecircumflex_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&circumflex &kp LS(K)>;
            label = "ECIRCUMFLEX_MAJ";
        };

        icircumflex_maj: icircumflex_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&circumflex &kp LS(L)>;
            label = "ICIRCUMFLEX_MAJ";
        };

        ocircumflex_maj: ocircumflex_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&circumflex &kp LS(SEMICOLON)>;
            label = "OCIRCUMFLEX_MAJ";
        };

        ucircumflex_maj: ucircumflex_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&circumflex &kp LS(I)>;
            label = "ACIRCUMFLEX_MAJ";
        };

        ae_maj: ae_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(RA(Z))>;
            label = "AE_MAJ";
        };

        oe_maj: oe_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(RA(B))>;
            label = "OE_MAJ";
        };

        idiaeresis_maj: idiaeresis_maj {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&diaeresis &kp LS(L)>;
            label = "IDIAERESIS_MAJ";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Colemak {
            bindings = <
&kp Q        &kp W             &kp E         &kp R                 &kp T                               &kp Y                          &kp U         &kp I            &kp O             &kp P
&hml LGUI A  &hml RIGHT_ALT S  &hml LCTRL D  &hml LSHFT F          &hml LEFT_ALT G                     &hmr LEFT_ALT H                &hmr RSHFT J  &hmr RCTRL K     &hmr RIGHT_ALT L  &hmr LGUI SEMI
&kp Z        &kp X             &hml LALT C   &kp V                 &kp B                               &kp N                          &kp M         &hmr LALT COMMA  &kp PERIOD        &kp FSLH
                                             &layer_thumb 1 SPACE  &sticky_layer_thumb 2 LEFT_SHIFT    &sticky_thumb RIGHT_ALT ENTER  &ODK 4 0
            >;
        };

        Nav {
            bindings = <
&trans      &trans                 &kp TAB                &trans                     &trans        &trans                    &trans                       &trans                   &trans           &trans
&trans      &hml RIGHT_ALT DELETE  &hml LCTRL ESCAPE      &hml LEFT_SHIFT BACKSPACE  &trans        &hmr LEFT_ALT LEFT_ARROW  &hmr RIGHT_SHIFT DOWN_ARROW  &hmr RCTRL UP_ARROW      &hmr RALT RIGHT  &hmr LEFT_GUI PRINTSCREEN
&caps_word  &trans                 &hml LEFT_ALT LS(TAB)  &trans                     &caps_word    &kp HOME                  &kp PAGE_DOWN                &hmr LEFT_ALT PAGE_DOWN  &kp END          &trans
                                                          &trans                     &trans        &trans                    &trans
            >;
        };

        Numeric {
            bindings = <
&kp LS(NUMBER_1)    &kp LS(NUMBER_2)         &kp LS(NUMBER_3)     &kp LS(NUMBER_4)     &kp LS(N5)                &kp LS(NUMBER_6)        &kp LS(N7)     &kp LS(N8)     &kp LS(N9)         &kp LS(N0)
&hml LGUI NUMBER_1  &hml RIGHT_ALT NUMBER_2  &hml LCTRL NUMBER_3  &hml LSHFT NUMBER_4  &hml LEFT_ALT NUMBER_5    &hmr LEFT_ALT NUMBER_6  &hmr RSHFT N7  &hmr RCTRL N8  &hmr RIGHT_ALT N9  &hmr LGUI N0
&kp F1              &kp F2                   &kp F3               &kp F4               &kp F5                    &kp F6                  &kp F7         &kp F8         &kp F9             &kp F10
                                                                  &kp F11              &kp F12                   &kp F11                 &kp F12
            >;
        };

        French {
            bindings = <
&acircumflex  &trans        &trans     &trans   &trans    &trans  &trans  &ucircumflex  &icircumflex  &oe
&agrave       &ecircumflex  &egrave    &eacute  &trans    &trans  &trans  &ugrave       &idiaeresis   &ocircumflex
&ae           &trans        &kp MINUS  &trans   &trans    &trans  &trans  &trans        &trans        &trans
                                       &kp SQT  &trans    &trans  &trans
            >;
        };

        Code {
            bindings = <
&kp CARET       &kp LESS_THAN         &kp GREATER_THAN       &kp DOLLAR       &kp PERCENT    &kp AT_SIGN           &kp AMPERSAND    &kp ASTERISK   &kp SQT    &kp GRAVE
&kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp EQUAL      &kp NON_US_BACKSLASH  &kp PLUS         &kp MINUS      &kp SLASH  &kp DOUBLE_QUOTES
&kp TILDE       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp UNDERSCORE   &kp HASH       &kp PIPE              &kp EXCLAMATION  &kp SEMICOLON  &kp COLON  &kp QUESTION
                                                             &trans           &trans         &trans                &trans
            >;
        };

        Media {
            bindings = <
&trans        &trans        &trans        &trans        &trans            &trans  &trans             &trans           &trans      &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR_ALL    &trans  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE  &trans
&trans        &trans        &trans        &trans        &trans            &trans  &trans             &trans           &trans      &trans
                                          &trans        &trans            &trans  &trans
            >;
        };
    };
};
